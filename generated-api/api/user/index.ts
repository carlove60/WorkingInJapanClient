/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createUserModelResultObjectFromDiscriminatorValue, serializeUserModel, serializeUserModelResultObject, type UserModel, type UserModelResultObject } from '../../models/index.js';
// @ts-ignore
import { ChangeLanguageRequestBuilderRequestsMetadata, type ChangeLanguageRequestBuilder } from './changeLanguage/index.js';
// @ts-ignore
import { GetUserRequestBuilderRequestsMetadata, type GetUserRequestBuilder } from './getUser/index.js';
// @ts-ignore
import { LoginRequestBuilderRequestsMetadata, type LoginRequestBuilder } from './login/index.js';
// @ts-ignore
import { RegisterRequestBuilderRequestsMetadata, type RegisterRequestBuilder } from './register/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/user
 */
export interface UserRequestBuilder extends BaseRequestBuilder<UserRequestBuilder> {
    /**
     * The changeLanguage property
     */
    get changeLanguage(): ChangeLanguageRequestBuilder;
    /**
     * The getUser property
     */
    get getUser(): GetUserRequestBuilder;
    /**
     * The login property
     */
    get login(): LoginRequestBuilder;
    /**
     * The register property
     */
    get register(): RegisterRequestBuilder;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<UserModelResultObject>}
     */
     post(body: UserModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<UserModelResultObject | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: UserModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const UserRequestBuilderUriTemplate = "{+baseurl}/api/user";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const UserRequestBuilderNavigationMetadata: Record<Exclude<keyof UserRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    changeLanguage: {
        requestsMetadata: ChangeLanguageRequestBuilderRequestsMetadata,
    },
    getUser: {
        requestsMetadata: GetUserRequestBuilderRequestsMetadata,
    },
    login: {
        requestsMetadata: LoginRequestBuilderRequestsMetadata,
    },
    register: {
        requestsMetadata: RegisterRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const UserRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: UserRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, text/plain;q=0.9",
        adapterMethodName: "send",
        responseBodyFactory:  createUserModelResultObjectFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUserModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */

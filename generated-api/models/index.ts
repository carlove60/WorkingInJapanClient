/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type Guid, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AddToQueueRequest extends Parsable {
}
export interface AddToQueueResponse extends Parsable {
    /**
     * The result property
     */
    result?: PartyModelResultObject | null;
}
export interface CheckInRequest extends Parsable {
    /**
     * The id property
     */
    id?: Guid | null;
}
export interface CheckInResponse extends Parsable {
    /**
     * The result property
     */
    result?: PartyModelResultObject | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AddToQueueRequest}
 */
// @ts-ignore
export function createAddToQueueRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAddToQueueRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AddToQueueResponse}
 */
// @ts-ignore
export function createAddToQueueResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAddToQueueResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CheckInRequest}
 */
// @ts-ignore
export function createCheckInRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCheckInRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CheckInResponse}
 */
// @ts-ignore
export function createCheckInResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCheckInResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PartyModel}
 */
// @ts-ignore
export function createPartyModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPartyModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PartyModelResultObject}
 */
// @ts-ignore
export function createPartyModelResultObjectFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPartyModelResultObject;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ValidationMessage}
 */
// @ts-ignore
export function createValidationMessageFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoValidationMessage;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WaitingListMetaDataResponse}
 */
// @ts-ignore
export function createWaitingListMetaDataResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWaitingListMetaDataResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WaitingListModel}
 */
// @ts-ignore
export function createWaitingListModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWaitingListModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WaitingListModelResultObject}
 */
// @ts-ignore
export function createWaitingListModelResultObjectFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWaitingListModelResultObject;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WaitingListRequest}
 */
// @ts-ignore
export function createWaitingListRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWaitingListRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WaitingListResponse}
 */
// @ts-ignore
export function createWaitingListResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWaitingListResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAddToQueueRequest(addToQueueRequest: Partial<AddToQueueRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAddToQueueResponse(addToQueueResponse: Partial<AddToQueueResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "result": n => { addToQueueResponse.result = n.getObjectValue<PartyModelResultObject>(createPartyModelResultObjectFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCheckInRequest(checkInRequest: Partial<CheckInRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { checkInRequest.id = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCheckInResponse(checkInResponse: Partial<CheckInResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "result": n => { checkInResponse.result = n.getObjectValue<PartyModelResultObject>(createPartyModelResultObjectFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPartyModel(partyModel: Partial<PartyModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { partyModel.id = n.getGuidValue(); },
        "isReady": n => { partyModel.isReady = n.getBooleanValue(); },
        "name": n => { partyModel.name = n.getStringValue(); },
        "size": n => { partyModel.size = n.getNumberValue(); },
        "waitingListModel": n => { partyModel.waitingListModel = n.getObjectValue<WaitingListModel>(createWaitingListModelFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPartyModelResultObject(partyModelResultObject: Partial<PartyModelResultObject> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "messages": n => { partyModelResultObject.messages = n.getCollectionOfObjectValues<ValidationMessage>(createValidationMessageFromDiscriminatorValue); },
        "records": n => { partyModelResultObject.records = n.getCollectionOfObjectValues<PartyModel>(createPartyModelFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoValidationMessage(validationMessage: Partial<ValidationMessage> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "message": n => { validationMessage.message = n.getStringValue(); },
        "type": n => { validationMessage.type = n.getEnumValue<MessageType>(MessageTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWaitingListMetaDataResponse(waitingListMetaDataResponse: Partial<WaitingListMetaDataResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "result": n => { waitingListMetaDataResponse.result = n.getObjectValue<WaitingListModelResultObject>(createWaitingListModelResultObjectFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWaitingListModel(waitingListModel: Partial<WaitingListModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { waitingListModel.id = n.getGuidValue(); },
        "name": n => { waitingListModel.name = n.getStringValue(); },
        "parties": n => { waitingListModel.parties = n.getCollectionOfObjectValues<PartyModel>(createPartyModelFromDiscriminatorValue); },
        "timeForService": n => { waitingListModel.timeForService = n.getNumberValue(); },
        "totalSeatsAvailable": n => { waitingListModel.totalSeatsAvailable = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWaitingListModelResultObject(waitingListModelResultObject: Partial<WaitingListModelResultObject> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "messages": n => { waitingListModelResultObject.messages = n.getCollectionOfObjectValues<ValidationMessage>(createValidationMessageFromDiscriminatorValue); },
        "records": n => { waitingListModelResultObject.records = n.getCollectionOfObjectValues<WaitingListModel>(createWaitingListModelFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWaitingListRequest(waitingListRequest: Partial<WaitingListRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { waitingListRequest.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWaitingListResponse(waitingListResponse: Partial<WaitingListResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "result": n => { waitingListResponse.result = n.getObjectValue<WaitingListModelResultObject>(createWaitingListModelResultObjectFromDiscriminatorValue); },
    }
}
export type MessageType = (typeof MessageTypeObject)[keyof typeof MessageTypeObject];
export interface PartyModel extends Parsable {
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The isReady property
     */
    isReady?: boolean | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The size property
     */
    size?: number | null;
    /**
     * The waitingListModel property
     */
    waitingListModel?: WaitingListModel | null;
}
export interface PartyModelResultObject extends Parsable {
    /**
     * The messages property
     */
    messages?: ValidationMessage[] | null;
    /**
     * The records property
     */
    records?: PartyModel[] | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAddToQueueRequest(writer: SerializationWriter, addToQueueRequest: Partial<AddToQueueRequest> | undefined | null = {}) : void {
    if (addToQueueRequest) {
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAddToQueueResponse(writer: SerializationWriter, addToQueueResponse: Partial<AddToQueueResponse> | undefined | null = {}) : void {
    if (addToQueueResponse) {
        writer.writeObjectValue<PartyModelResultObject>("result", addToQueueResponse.result, serializePartyModelResultObject);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCheckInRequest(writer: SerializationWriter, checkInRequest: Partial<CheckInRequest> | undefined | null = {}) : void {
    if (checkInRequest) {
        writer.writeGuidValue("id", checkInRequest.id);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCheckInResponse(writer: SerializationWriter, checkInResponse: Partial<CheckInResponse> | undefined | null = {}) : void {
    if (checkInResponse) {
        writer.writeObjectValue<PartyModelResultObject>("result", checkInResponse.result, serializePartyModelResultObject);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePartyModel(writer: SerializationWriter, partyModel: Partial<PartyModel> | undefined | null = {}) : void {
    if (partyModel) {
        writer.writeGuidValue("id", partyModel.id);
        writer.writeBooleanValue("isReady", partyModel.isReady);
        writer.writeStringValue("name", partyModel.name);
        writer.writeNumberValue("size", partyModel.size);
        writer.writeObjectValue<WaitingListModel>("waitingListModel", partyModel.waitingListModel, serializeWaitingListModel);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePartyModelResultObject(writer: SerializationWriter, partyModelResultObject: Partial<PartyModelResultObject> | undefined | null = {}) : void {
    if (partyModelResultObject) {
        writer.writeCollectionOfObjectValues<ValidationMessage>("messages", partyModelResultObject.messages, serializeValidationMessage);
        writer.writeCollectionOfObjectValues<PartyModel>("records", partyModelResultObject.records, serializePartyModel);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeValidationMessage(writer: SerializationWriter, validationMessage: Partial<ValidationMessage> | undefined | null = {}) : void {
    if (validationMessage) {
        writer.writeStringValue("message", validationMessage.message);
        writer.writeEnumValue<MessageType>("type", validationMessage.type);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWaitingListMetaDataResponse(writer: SerializationWriter, waitingListMetaDataResponse: Partial<WaitingListMetaDataResponse> | undefined | null = {}) : void {
    if (waitingListMetaDataResponse) {
        writer.writeObjectValue<WaitingListModelResultObject>("result", waitingListMetaDataResponse.result, serializeWaitingListModelResultObject);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWaitingListModel(writer: SerializationWriter, waitingListModel: Partial<WaitingListModel> | undefined | null = {}) : void {
    if (waitingListModel) {
        writer.writeGuidValue("id", waitingListModel.id);
        writer.writeStringValue("name", waitingListModel.name);
        writer.writeCollectionOfObjectValues<PartyModel>("parties", waitingListModel.parties, serializePartyModel);
        writer.writeNumberValue("timeForService", waitingListModel.timeForService);
        writer.writeNumberValue("totalSeatsAvailable", waitingListModel.totalSeatsAvailable);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWaitingListModelResultObject(writer: SerializationWriter, waitingListModelResultObject: Partial<WaitingListModelResultObject> | undefined | null = {}) : void {
    if (waitingListModelResultObject) {
        writer.writeCollectionOfObjectValues<ValidationMessage>("messages", waitingListModelResultObject.messages, serializeValidationMessage);
        writer.writeCollectionOfObjectValues<WaitingListModel>("records", waitingListModelResultObject.records, serializeWaitingListModel);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWaitingListRequest(writer: SerializationWriter, waitingListRequest: Partial<WaitingListRequest> | undefined | null = {}) : void {
    if (waitingListRequest) {
        writer.writeStringValue("name", waitingListRequest.name);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWaitingListResponse(writer: SerializationWriter, waitingListResponse: Partial<WaitingListResponse> | undefined | null = {}) : void {
    if (waitingListResponse) {
        writer.writeObjectValue<WaitingListModelResultObject>("result", waitingListResponse.result, serializeWaitingListModelResultObject);
    }
}
export interface ValidationMessage extends Parsable {
    /**
     * The message property
     */
    message?: string | null;
    /**
     * The type property
     */
    type?: MessageType | null;
}
export interface WaitingListMetaDataResponse extends Parsable {
    /**
     * The result property
     */
    result?: WaitingListModelResultObject | null;
}
export interface WaitingListModel extends Parsable {
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The parties property
     */
    parties?: PartyModel[] | null;
    /**
     * The timeForService property
     */
    timeForService?: number | null;
    /**
     * The totalSeatsAvailable property
     */
    totalSeatsAvailable?: number | null;
}
export interface WaitingListModelResultObject extends Parsable {
    /**
     * The messages property
     */
    messages?: ValidationMessage[] | null;
    /**
     * The records property
     */
    records?: WaitingListModel[] | null;
}
export interface WaitingListRequest extends Parsable {
    /**
     * The name property
     */
    name?: string | null;
}
export interface WaitingListResponse extends Parsable {
    /**
     * The result property
     */
    result?: WaitingListModelResultObject | null;
}
export const MessageTypeObject = {
    Success: "success",
    Info: "info",
    Warning: "warning",
    ErrorEscaped: "error",
} as const;
/* tslint:enable */
/* eslint-enable */

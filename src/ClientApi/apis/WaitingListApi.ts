/* tslint:disable */
/* eslint-disable */
/**
 * WaitingList.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddToWaitingListRequest,
  AddToWaitingListResponse,
  WaitingListResponse,
} from '../models/index';
import {
    AddToWaitingListRequestFromJSON,
    AddToWaitingListRequestToJSON,
    AddToWaitingListResponseFromJSON,
    AddToWaitingListResponseToJSON,
    WaitingListResponseFromJSON,
    WaitingListResponseToJSON,
} from '../models/index';

export interface ApiWaitingListAddPartyToWaitinglistPostRequest {
    addToWaitingListRequest?: AddToWaitingListRequest;
}

/**
 * 
 */
export class WaitingListApi extends runtime.BaseAPI {

    /**
     */
    async apiWaitingListAddPartyToWaitinglistPostRaw(requestParameters: ApiWaitingListAddPartyToWaitinglistPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddToWaitingListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/waiting-list/add-party-to-waitinglist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddToWaitingListRequestToJSON(requestParameters['addToWaitingListRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddToWaitingListResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiWaitingListAddPartyToWaitinglistPost(requestParameters: ApiWaitingListAddPartyToWaitinglistPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddToWaitingListResponse> {
        const response = await this.apiWaitingListAddPartyToWaitinglistPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiWaitingListWaitingListGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaitingListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/waiting-list/waiting-list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WaitingListResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiWaitingListWaitingListGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaitingListResponse> {
        const response = await this.apiWaitingListWaitingListGetRaw(initOverrides);
        return await response.value();
    }

}

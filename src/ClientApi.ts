//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5240";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    register(body: UserRegistrationModel | undefined): Promise<StringResultObject> {
        let url_ = this.baseUrl + "/api/Auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<StringResultObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringResultObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StringResultObject>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: LoginModel | undefined): Promise<IActionResultResultObject> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<IActionResultResultObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IActionResultResultObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<IActionResultResultObject>(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    lessonGET(id: string | undefined): Promise<ResumeModel> {
        let url_ = this.baseUrl + "/api/lesson?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLessonGET(_response);
        });
    }

    protected processLessonGET(response: Response): Promise<ResumeModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResumeModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResumeModel>(null as any);
    }

    /**
     * @return OK
     */
    lessonPOST(id: string): Promise<string> {
        let url_ = this.baseUrl + "/api/lesson/api/lesson/id={id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLessonPOST(_response);
        });
    }

    protected processLessonPOST(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    register2(body: UserModel | undefined): Promise<MessageListResultObject> {
        let url_ = this.baseUrl + "/api/user/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister2(_response);
        });
    }

    protected processRegister2(response: Response): Promise<MessageListResultObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MessageListResultObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MessageListResultObject>(null as any);
    }

    /**
     * @param email (optional) 
     * @param password (optional) 
     * @return OK
     */
    login2(email: string | undefined, password: string | undefined): Promise<ValidationMessageResultObject> {
        let url_ = this.baseUrl + "/api/user/login?";
        if (email === null)
            throw new Error("The parameter 'email' cannot be null.");
        else if (email !== undefined)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        if (password === null)
            throw new Error("The parameter 'password' cannot be null.");
        else if (password !== undefined)
            url_ += "password=" + encodeURIComponent("" + password) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin2(_response);
        });
    }

    protected processLogin2(response: Response): Promise<ValidationMessageResultObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ValidationMessageResultObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ValidationMessageResultObject>(null as any);
    }

    /**
     * @param language (optional) 
     * @return OK
     */
    changeLanguage(language: Language | undefined): Promise<BooleanResultObject> {
        let url_ = this.baseUrl + "/api/user/changeLanguage?";
        if (language === null)
            throw new Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChangeLanguage(_response);
        });
    }

    protected processChangeLanguage(response: Response): Promise<BooleanResultObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanResultObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BooleanResultObject>(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getUser(id: string | undefined): Promise<UserModelResultObject> {
        let url_ = this.baseUrl + "/api/user/getUser?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUser(_response);
        });
    }

    protected processGetUser(response: Response): Promise<UserModelResultObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserModelResultObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserModelResultObject>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    user(body: UserModel | undefined): Promise<UserModelResultObject> {
        let url_ = this.baseUrl + "/api/user";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUser(_response);
        });
    }

    protected processUser(response: Response): Promise<UserModelResultObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserModelResultObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserModelResultObject>(null as any);
    }
}

export class ActionResult implements IActionResult {

    constructor(data?: IActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new ActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IActionResult {
}

export class AddressModel implements IAddressModel {
    id!: string;
    street!: string | undefined;
    city!: string | undefined;
    state!: string | undefined;
    zipCode!: string | undefined;
    country!: string | undefined;

    constructor(data?: IAddressModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): AddressModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddressModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["street"] = this.street;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["country"] = this.country;
        return data;
    }
}

export interface IAddressModel {
    id: string;
    street: string | undefined;
    city: string | undefined;
    state: string | undefined;
    zipCode: string | undefined;
    country: string | undefined;
}

export class BooleanActionResult implements IBooleanActionResult {
    result?: ActionResult;
    value?: boolean;

    constructor(data?: IBooleanActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ActionResult.fromJS(_data["result"]) : <any>undefined;
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): BooleanActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["value"] = this.value;
        return data;
    }
}

export interface IBooleanActionResult {
    result?: ActionResult;
    value?: boolean;
}

export class BooleanResultObject implements IBooleanResultObject {
    records?: BooleanActionResult[] | undefined;
    userMessages?: ValidationMessage[] | undefined;
    systemMessages?: string[] | undefined;
    isError?: boolean;
    httpErrorCode?: number;
    httpErrorMessage?: string | undefined;

    constructor(data?: IBooleanResultObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(BooleanActionResult.fromJS(item));
            }
            if (Array.isArray(_data["userMessages"])) {
                this.userMessages = [] as any;
                for (let item of _data["userMessages"])
                    this.userMessages!.push(ValidationMessage.fromJS(item));
            }
            if (Array.isArray(_data["systemMessages"])) {
                this.systemMessages = [] as any;
                for (let item of _data["systemMessages"])
                    this.systemMessages!.push(item);
            }
            this.isError = _data["isError"];
            this.httpErrorCode = _data["httpErrorCode"];
            this.httpErrorMessage = _data["httpErrorMessage"];
        }
    }

    static fromJS(data: any): BooleanResultObject {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanResultObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        if (Array.isArray(this.userMessages)) {
            data["userMessages"] = [];
            for (let item of this.userMessages)
                data["userMessages"].push(item.toJSON());
        }
        if (Array.isArray(this.systemMessages)) {
            data["systemMessages"] = [];
            for (let item of this.systemMessages)
                data["systemMessages"].push(item);
        }
        data["isError"] = this.isError;
        data["httpErrorCode"] = this.httpErrorCode;
        data["httpErrorMessage"] = this.httpErrorMessage;
        return data;
    }
}

export interface IBooleanResultObject {
    records?: BooleanActionResult[] | undefined;
    userMessages?: ValidationMessage[] | undefined;
    systemMessages?: string[] | undefined;
    isError?: boolean;
    httpErrorCode?: number;
    httpErrorMessage?: string | undefined;
}

export class IActionResult implements IIActionResult {

    constructor(data?: IIActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new IActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIActionResult {
}

export class IActionResultActionResult implements IIActionResultActionResult {
    result?: ActionResult;
    value?: IActionResult;

    constructor(data?: IIActionResultActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ActionResult.fromJS(_data["result"]) : <any>undefined;
            this.value = _data["value"] ? IActionResult.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IActionResultActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new IActionResultActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data;
    }
}

export interface IIActionResultActionResult {
    result?: ActionResult;
    value?: IActionResult;
}

export class IActionResultResultObject implements IIActionResultResultObject {
    records?: IActionResultActionResult[] | undefined;
    userMessages?: ValidationMessage[] | undefined;
    systemMessages?: string[] | undefined;
    isError?: boolean;
    httpErrorCode?: number;
    httpErrorMessage?: string | undefined;

    constructor(data?: IIActionResultResultObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(IActionResultActionResult.fromJS(item));
            }
            if (Array.isArray(_data["userMessages"])) {
                this.userMessages = [] as any;
                for (let item of _data["userMessages"])
                    this.userMessages!.push(ValidationMessage.fromJS(item));
            }
            if (Array.isArray(_data["systemMessages"])) {
                this.systemMessages = [] as any;
                for (let item of _data["systemMessages"])
                    this.systemMessages!.push(item);
            }
            this.isError = _data["isError"];
            this.httpErrorCode = _data["httpErrorCode"];
            this.httpErrorMessage = _data["httpErrorMessage"];
        }
    }

    static fromJS(data: any): IActionResultResultObject {
        data = typeof data === 'object' ? data : {};
        let result = new IActionResultResultObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        if (Array.isArray(this.userMessages)) {
            data["userMessages"] = [];
            for (let item of this.userMessages)
                data["userMessages"].push(item.toJSON());
        }
        if (Array.isArray(this.systemMessages)) {
            data["systemMessages"] = [];
            for (let item of this.systemMessages)
                data["systemMessages"].push(item);
        }
        data["isError"] = this.isError;
        data["httpErrorCode"] = this.httpErrorCode;
        data["httpErrorMessage"] = this.httpErrorMessage;
        return data;
    }
}

export interface IIActionResultResultObject {
    records?: IActionResultActionResult[] | undefined;
    userMessages?: ValidationMessage[] | undefined;
    systemMessages?: string[] | undefined;
    isError?: boolean;
    httpErrorCode?: number;
    httpErrorMessage?: string | undefined;
}

export class IdentityUser implements IIdentityUser {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;

    constructor(data?: IIdentityUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.email = _data["email"];
            this.normalizedEmail = _data["normalizedEmail"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.passwordHash = _data["passwordHash"];
            this.securityStamp = _data["securityStamp"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
        }
    }

    static fromJS(data: any): IdentityUser {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        return data;
    }
}

export interface IIdentityUser {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
}

export enum JLPT {
    N5 = "N5",
    N4 = "N4",
    N3 = "N3",
    N2 = "N2",
    N1 = "N1",
    None = "None",
}

export enum Language {
    Japanese = "Japanese",
    English = "English",
}

export enum LanguageLevel {
    None = "None",
    Some = "Some",
    Conversational = "Conversational",
    Business = "Business",
    Fluent = "Fluent",
    Native = "Native",
}

export class LoginModel implements ILoginModel {
    email?: string | undefined;
    password?: string | undefined;
    remember?: boolean;

    constructor(data?: ILoginModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.remember = _data["remember"];
        }
    }

    static fromJS(data: any): LoginModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["remember"] = this.remember;
        return data;
    }
}

export interface ILoginModel {
    email?: string | undefined;
    password?: string | undefined;
    remember?: boolean;
}

export class MessageListActionResult implements IMessageListActionResult {
    result?: ActionResult;
    value?: ValidationMessage[] | undefined;

    constructor(data?: IMessageListActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ActionResult.fromJS(_data["result"]) : <any>undefined;
            if (Array.isArray(_data["value"])) {
                this.value = [] as any;
                for (let item of _data["value"])
                    this.value!.push(ValidationMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MessageListActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new MessageListActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.value)) {
            data["value"] = [];
            for (let item of this.value)
                data["value"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMessageListActionResult {
    result?: ActionResult;
    value?: ValidationMessage[] | undefined;
}

export class MessageListResultObject implements IMessageListResultObject {
    records?: MessageListActionResult[] | undefined;
    userMessages?: ValidationMessage[] | undefined;
    systemMessages?: string[] | undefined;
    isError?: boolean;
    httpErrorCode?: number;
    httpErrorMessage?: string | undefined;

    constructor(data?: IMessageListResultObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(MessageListActionResult.fromJS(item));
            }
            if (Array.isArray(_data["userMessages"])) {
                this.userMessages = [] as any;
                for (let item of _data["userMessages"])
                    this.userMessages!.push(ValidationMessage.fromJS(item));
            }
            if (Array.isArray(_data["systemMessages"])) {
                this.systemMessages = [] as any;
                for (let item of _data["systemMessages"])
                    this.systemMessages!.push(item);
            }
            this.isError = _data["isError"];
            this.httpErrorCode = _data["httpErrorCode"];
            this.httpErrorMessage = _data["httpErrorMessage"];
        }
    }

    static fromJS(data: any): MessageListResultObject {
        data = typeof data === 'object' ? data : {};
        let result = new MessageListResultObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        if (Array.isArray(this.userMessages)) {
            data["userMessages"] = [];
            for (let item of this.userMessages)
                data["userMessages"].push(item.toJSON());
        }
        if (Array.isArray(this.systemMessages)) {
            data["systemMessages"] = [];
            for (let item of this.systemMessages)
                data["systemMessages"].push(item);
        }
        data["isError"] = this.isError;
        data["httpErrorCode"] = this.httpErrorCode;
        data["httpErrorMessage"] = this.httpErrorMessage;
        return data;
    }
}

export interface IMessageListResultObject {
    records?: MessageListActionResult[] | undefined;
    userMessages?: ValidationMessage[] | undefined;
    systemMessages?: string[] | undefined;
    isError?: boolean;
    httpErrorCode?: number;
    httpErrorMessage?: string | undefined;
}

export enum MessageType {
    Warning = "Warning",
    Error = "Error",
    Info = "Info",
}

export enum RegistrationType {
    User = "User",
    Company = "Company",
}

export class ResumeModel implements IResumeModel {
    id!: string;
    title!: string | undefined;
    content!: string | undefined;
    user?: UserModel;
    userId?: string;

    constructor(data?: IResumeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.user = _data["user"] ? UserModel.fromJS(_data["user"]) : <any>undefined;
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): ResumeModel {
        data = typeof data === 'object' ? data : {};
        let result = new ResumeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["content"] = this.content;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IResumeModel {
    id: string;
    title: string | undefined;
    content: string | undefined;
    user?: UserModel;
    userId?: string;
}

export class StringActionResult implements IStringActionResult {
    result?: ActionResult;
    value?: string | undefined;

    constructor(data?: IStringActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ActionResult.fromJS(_data["result"]) : <any>undefined;
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): StringActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new StringActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["value"] = this.value;
        return data;
    }
}

export interface IStringActionResult {
    result?: ActionResult;
    value?: string | undefined;
}

export class StringResultObject implements IStringResultObject {
    records?: StringActionResult[] | undefined;
    userMessages?: ValidationMessage[] | undefined;
    systemMessages?: string[] | undefined;
    isError?: boolean;
    httpErrorCode?: number;
    httpErrorMessage?: string | undefined;

    constructor(data?: IStringResultObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(StringActionResult.fromJS(item));
            }
            if (Array.isArray(_data["userMessages"])) {
                this.userMessages = [] as any;
                for (let item of _data["userMessages"])
                    this.userMessages!.push(ValidationMessage.fromJS(item));
            }
            if (Array.isArray(_data["systemMessages"])) {
                this.systemMessages = [] as any;
                for (let item of _data["systemMessages"])
                    this.systemMessages!.push(item);
            }
            this.isError = _data["isError"];
            this.httpErrorCode = _data["httpErrorCode"];
            this.httpErrorMessage = _data["httpErrorMessage"];
        }
    }

    static fromJS(data: any): StringResultObject {
        data = typeof data === 'object' ? data : {};
        let result = new StringResultObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        if (Array.isArray(this.userMessages)) {
            data["userMessages"] = [];
            for (let item of this.userMessages)
                data["userMessages"].push(item.toJSON());
        }
        if (Array.isArray(this.systemMessages)) {
            data["systemMessages"] = [];
            for (let item of this.systemMessages)
                data["systemMessages"].push(item);
        }
        data["isError"] = this.isError;
        data["httpErrorCode"] = this.httpErrorCode;
        data["httpErrorMessage"] = this.httpErrorMessage;
        return data;
    }
}

export interface IStringResultObject {
    records?: StringActionResult[] | undefined;
    userMessages?: ValidationMessage[] | undefined;
    systemMessages?: string[] | undefined;
    isError?: boolean;
    httpErrorCode?: number;
    httpErrorMessage?: string | undefined;
}

export class UserModel implements IUserModel {
    id?: string;
    firstName?: string | undefined;
    lastName?: string | undefined;
    phoneNumber?: string | undefined;
    dateOfBirth?: Date;
    address?: AddressModel;
    language?: Language;
    role?: string | undefined;
    isLoggedIn?: boolean;
    nationality?: string | undefined;
    visaStatus?: VisaStatus;
    jlpt?: JLPT;
    japaneseLevel?: LanguageLevel;
    englishLevel?: LanguageLevel;
    profilePicture?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: string | undefined;
    identityUser?: IdentityUser;
    resume?: ResumeModel;

    constructor(data?: IUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.phoneNumber = _data["phoneNumber"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
            this.address = _data["address"] ? AddressModel.fromJS(_data["address"]) : <any>undefined;
            this.language = _data["language"];
            this.role = _data["role"];
            this.isLoggedIn = _data["isLoggedIn"];
            this.nationality = _data["nationality"];
            this.visaStatus = _data["visaStatus"];
            this.jlpt = _data["jlpt"];
            this.japaneseLevel = _data["japaneseLevel"];
            this.englishLevel = _data["englishLevel"];
            this.profilePicture = _data["profilePicture"];
            this.email = _data["email"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.identityUser = _data["identityUser"] ? IdentityUser.fromJS(_data["identityUser"]) : <any>undefined;
            this.resume = _data["resume"] ? ResumeModel.fromJS(_data["resume"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["phoneNumber"] = this.phoneNumber;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["language"] = this.language;
        data["role"] = this.role;
        data["isLoggedIn"] = this.isLoggedIn;
        data["nationality"] = this.nationality;
        data["visaStatus"] = this.visaStatus;
        data["jlpt"] = this.jlpt;
        data["japaneseLevel"] = this.japaneseLevel;
        data["englishLevel"] = this.englishLevel;
        data["profilePicture"] = this.profilePicture;
        data["email"] = this.email;
        data["emailConfirmed"] = this.emailConfirmed;
        data["identityUser"] = this.identityUser ? this.identityUser.toJSON() : <any>undefined;
        data["resume"] = this.resume ? this.resume.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserModel {
    id?: string;
    firstName?: string | undefined;
    lastName?: string | undefined;
    phoneNumber?: string | undefined;
    dateOfBirth?: Date;
    address?: AddressModel;
    language?: Language;
    role?: string | undefined;
    isLoggedIn?: boolean;
    nationality?: string | undefined;
    visaStatus?: VisaStatus;
    jlpt?: JLPT;
    japaneseLevel?: LanguageLevel;
    englishLevel?: LanguageLevel;
    profilePicture?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: string | undefined;
    identityUser?: IdentityUser;
    resume?: ResumeModel;
}

export class UserModelActionResult implements IUserModelActionResult {
    result?: ActionResult;
    value?: UserModel;

    constructor(data?: IUserModelActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ActionResult.fromJS(_data["result"]) : <any>undefined;
            this.value = _data["value"] ? UserModel.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserModelActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new UserModelActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserModelActionResult {
    result?: ActionResult;
    value?: UserModel;
}

export class UserModelResultObject implements IUserModelResultObject {
    records?: UserModelActionResult[] | undefined;
    userMessages?: ValidationMessage[] | undefined;
    systemMessages?: string[] | undefined;
    isError?: boolean;
    httpErrorCode?: number;
    httpErrorMessage?: string | undefined;

    constructor(data?: IUserModelResultObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(UserModelActionResult.fromJS(item));
            }
            if (Array.isArray(_data["userMessages"])) {
                this.userMessages = [] as any;
                for (let item of _data["userMessages"])
                    this.userMessages!.push(ValidationMessage.fromJS(item));
            }
            if (Array.isArray(_data["systemMessages"])) {
                this.systemMessages = [] as any;
                for (let item of _data["systemMessages"])
                    this.systemMessages!.push(item);
            }
            this.isError = _data["isError"];
            this.httpErrorCode = _data["httpErrorCode"];
            this.httpErrorMessage = _data["httpErrorMessage"];
        }
    }

    static fromJS(data: any): UserModelResultObject {
        data = typeof data === 'object' ? data : {};
        let result = new UserModelResultObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        if (Array.isArray(this.userMessages)) {
            data["userMessages"] = [];
            for (let item of this.userMessages)
                data["userMessages"].push(item.toJSON());
        }
        if (Array.isArray(this.systemMessages)) {
            data["systemMessages"] = [];
            for (let item of this.systemMessages)
                data["systemMessages"].push(item);
        }
        data["isError"] = this.isError;
        data["httpErrorCode"] = this.httpErrorCode;
        data["httpErrorMessage"] = this.httpErrorMessage;
        return data;
    }
}

export interface IUserModelResultObject {
    records?: UserModelActionResult[] | undefined;
    userMessages?: ValidationMessage[] | undefined;
    systemMessages?: string[] | undefined;
    isError?: boolean;
    httpErrorCode?: number;
    httpErrorMessage?: string | undefined;
}

export class UserRegistrationModel implements IUserRegistrationModel {
    id?: string;
    firstName?: string | undefined;
    lastName?: string | undefined;
    phoneNumber?: string | undefined;
    dateOfBirth?: Date;
    address?: AddressModel;
    language?: Language;
    role?: string | undefined;
    isLoggedIn?: boolean;
    nationality?: string | undefined;
    visaStatus?: VisaStatus;
    jlpt?: JLPT;
    japaneseLevel?: LanguageLevel;
    englishLevel?: LanguageLevel;
    profilePicture?: string | undefined;
    emailConfirmed?: string | undefined;
    identityUser?: IdentityUser;
    resume?: ResumeModel;
    email?: string | undefined;
    confirmEmail?: string | undefined;
    password?: string | undefined;
    confirmPassword?: string | undefined;
    type?: RegistrationType;

    constructor(data?: IUserRegistrationModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.phoneNumber = _data["phoneNumber"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
            this.address = _data["address"] ? AddressModel.fromJS(_data["address"]) : <any>undefined;
            this.language = _data["language"];
            this.role = _data["role"];
            this.isLoggedIn = _data["isLoggedIn"];
            this.nationality = _data["nationality"];
            this.visaStatus = _data["visaStatus"];
            this.jlpt = _data["jlpt"];
            this.japaneseLevel = _data["japaneseLevel"];
            this.englishLevel = _data["englishLevel"];
            this.profilePicture = _data["profilePicture"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.identityUser = _data["identityUser"] ? IdentityUser.fromJS(_data["identityUser"]) : <any>undefined;
            this.resume = _data["resume"] ? ResumeModel.fromJS(_data["resume"]) : <any>undefined;
            this.email = _data["email"];
            this.confirmEmail = _data["confirmEmail"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): UserRegistrationModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserRegistrationModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["phoneNumber"] = this.phoneNumber;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["language"] = this.language;
        data["role"] = this.role;
        data["isLoggedIn"] = this.isLoggedIn;
        data["nationality"] = this.nationality;
        data["visaStatus"] = this.visaStatus;
        data["jlpt"] = this.jlpt;
        data["japaneseLevel"] = this.japaneseLevel;
        data["englishLevel"] = this.englishLevel;
        data["profilePicture"] = this.profilePicture;
        data["emailConfirmed"] = this.emailConfirmed;
        data["identityUser"] = this.identityUser ? this.identityUser.toJSON() : <any>undefined;
        data["resume"] = this.resume ? this.resume.toJSON() : <any>undefined;
        data["email"] = this.email;
        data["confirmEmail"] = this.confirmEmail;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        data["type"] = this.type;
        return data;
    }
}

export interface IUserRegistrationModel {
    id?: string;
    firstName?: string | undefined;
    lastName?: string | undefined;
    phoneNumber?: string | undefined;
    dateOfBirth?: Date;
    address?: AddressModel;
    language?: Language;
    role?: string | undefined;
    isLoggedIn?: boolean;
    nationality?: string | undefined;
    visaStatus?: VisaStatus;
    jlpt?: JLPT;
    japaneseLevel?: LanguageLevel;
    englishLevel?: LanguageLevel;
    profilePicture?: string | undefined;
    emailConfirmed?: string | undefined;
    identityUser?: IdentityUser;
    resume?: ResumeModel;
    email?: string | undefined;
    confirmEmail?: string | undefined;
    password?: string | undefined;
    confirmPassword?: string | undefined;
    type?: RegistrationType;
}

export class ValidationMessage implements IValidationMessage {
    messageEnglish?: string | undefined;
    messageJapanese?: string | undefined;
    type?: MessageType;

    constructor(data?: IValidationMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.messageEnglish = _data["messageEnglish"];
            this.messageJapanese = _data["messageJapanese"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): ValidationMessage {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["messageEnglish"] = this.messageEnglish;
        data["messageJapanese"] = this.messageJapanese;
        data["type"] = this.type;
        return data;
    }
}

export interface IValidationMessage {
    messageEnglish?: string | undefined;
    messageJapanese?: string | undefined;
    type?: MessageType;
}

export class ValidationMessageActionResult implements IValidationMessageActionResult {
    result?: ActionResult;
    value?: ValidationMessage;

    constructor(data?: IValidationMessageActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ActionResult.fromJS(_data["result"]) : <any>undefined;
            this.value = _data["value"] ? ValidationMessage.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ValidationMessageActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationMessageActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data;
    }
}

export interface IValidationMessageActionResult {
    result?: ActionResult;
    value?: ValidationMessage;
}

export class ValidationMessageResultObject implements IValidationMessageResultObject {
    records?: ValidationMessageActionResult[] | undefined;
    userMessages?: ValidationMessage[] | undefined;
    systemMessages?: string[] | undefined;
    isError?: boolean;
    httpErrorCode?: number;
    httpErrorMessage?: string | undefined;

    constructor(data?: IValidationMessageResultObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(ValidationMessageActionResult.fromJS(item));
            }
            if (Array.isArray(_data["userMessages"])) {
                this.userMessages = [] as any;
                for (let item of _data["userMessages"])
                    this.userMessages!.push(ValidationMessage.fromJS(item));
            }
            if (Array.isArray(_data["systemMessages"])) {
                this.systemMessages = [] as any;
                for (let item of _data["systemMessages"])
                    this.systemMessages!.push(item);
            }
            this.isError = _data["isError"];
            this.httpErrorCode = _data["httpErrorCode"];
            this.httpErrorMessage = _data["httpErrorMessage"];
        }
    }

    static fromJS(data: any): ValidationMessageResultObject {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationMessageResultObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        if (Array.isArray(this.userMessages)) {
            data["userMessages"] = [];
            for (let item of this.userMessages)
                data["userMessages"].push(item.toJSON());
        }
        if (Array.isArray(this.systemMessages)) {
            data["systemMessages"] = [];
            for (let item of this.systemMessages)
                data["systemMessages"].push(item);
        }
        data["isError"] = this.isError;
        data["httpErrorCode"] = this.httpErrorCode;
        data["httpErrorMessage"] = this.httpErrorMessage;
        return data;
    }
}

export interface IValidationMessageResultObject {
    records?: ValidationMessageActionResult[] | undefined;
    userMessages?: ValidationMessage[] | undefined;
    systemMessages?: string[] | undefined;
    isError?: boolean;
    httpErrorCode?: number;
    httpErrorMessage?: string | undefined;
}

export enum VisaStatus {
    Working = "Working",
    HighlySkilled = "HighlySkilled",
    IntraCompanyTransfee = "IntraCompanyTransfee",
    Student = "Student",
    WorkingHoliday = "WorkingHoliday",
    Spouse = "Spouse",
    NoVisa = "NoVisa",
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
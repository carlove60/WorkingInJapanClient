//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "/";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    register(body: UserModel | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: UserModel | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    lessonGET(id: string | undefined): Promise<ResumeModel> {
        let url_ = this.baseUrl + "/api/lesson?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLessonGET(_response);
        });
    }

    protected processLessonGET(response: Response): Promise<ResumeModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResumeModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResumeModel>(null as any);
    }

    /**
     * @return OK
     */
    lessonPOST(id: string): Promise<string> {
        let url_ = this.baseUrl + "/api/lesson/api/lesson/id={id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLessonPOST(_response);
        });
    }

    protected processLessonPOST(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    register2(body: UserModel | undefined): Promise<MessageListResultObject> {
        let url_ = this.baseUrl + "/api/user/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister2(_response);
        });
    }

    protected processRegister2(response: Response): Promise<MessageListResultObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MessageListResultObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MessageListResultObject>(null as any);
    }

    /**
     * @param email (optional) 
     * @param password (optional) 
     * @return OK
     */
    login2(email: string | undefined, password: string | undefined): Promise<ValidationMessageResultObject> {
        let url_ = this.baseUrl + "/api/user/login?";
        if (email === null)
            throw new Error("The parameter 'email' cannot be null.");
        else if (email !== undefined)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        if (password === null)
            throw new Error("The parameter 'password' cannot be null.");
        else if (password !== undefined)
            url_ += "password=" + encodeURIComponent("" + password) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin2(_response);
        });
    }

    protected processLogin2(response: Response): Promise<ValidationMessageResultObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ValidationMessageResultObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ValidationMessageResultObject>(null as any);
    }

    /**
     * @param language (optional) 
     * @return OK
     */
    changeLanguage(language: LanguageEnum | undefined): Promise<BooleanResultObject> {
        let url_ = this.baseUrl + "/api/user/changeLanguage?";
        if (language === null)
            throw new Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChangeLanguage(_response);
        });
    }

    protected processChangeLanguage(response: Response): Promise<BooleanResultObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanResultObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BooleanResultObject>(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getUser(id: string | undefined): Promise<UserModel> {
        let url_ = this.baseUrl + "/api/user/getUser?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUser(_response);
        });
    }

    protected processGetUser(response: Response): Promise<UserModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    user(body: UserModel | undefined): Promise<UserModelResultObject> {
        let url_ = this.baseUrl + "/api/user";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUser(_response);
        });
    }

    protected processUser(response: Response): Promise<UserModelResultObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserModelResultObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserModelResultObject>(null as any);
    }
}

export class AddressModel implements IAddressModel {
    id!: string;
    street!: string | undefined;
    city!: string | undefined;
    state!: string | undefined;
    zipCode!: string | undefined;
    country!: string | undefined;

    constructor(data?: IAddressModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): AddressModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddressModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["street"] = this.street;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["country"] = this.country;
        return data;
    }
}

export interface IAddressModel {
    id: string;
    street: string | undefined;
    city: string | undefined;
    state: string | undefined;
    zipCode: string | undefined;
    country: string | undefined;
}

export class BooleanResultObject implements IBooleanResultObject {
    records?: boolean[] | undefined;
    messages?: ValidationMessage[] | undefined;
    isError?: boolean;

    constructor(data?: IBooleanResultObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(item);
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(ValidationMessage.fromJS(item));
            }
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): BooleanResultObject {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanResultObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item);
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        data["isError"] = this.isError;
        return data;
    }
}

export interface IBooleanResultObject {
    records?: boolean[] | undefined;
    messages?: ValidationMessage[] | undefined;
    isError?: boolean;
}

export class CurriculumModel implements ICurriculumModel {
    id!: string;
    description!: string | undefined;
    lessons!: ResumeModel[] | undefined;

    constructor(data?: ICurriculumModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            if (Array.isArray(_data["lessons"])) {
                this.lessons = [] as any;
                for (let item of _data["lessons"])
                    this.lessons!.push(ResumeModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CurriculumModel {
        data = typeof data === 'object' ? data : {};
        let result = new CurriculumModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        if (Array.isArray(this.lessons)) {
            data["lessons"] = [];
            for (let item of this.lessons)
                data["lessons"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICurriculumModel {
    id: string;
    description: string | undefined;
    lessons: ResumeModel[] | undefined;
}

export enum LanguageEnum {
    _0 = 0,
    _1 = 1,
}

export class MessageListResultObject implements IMessageListResultObject {
    records?: ValidationMessage[][] | undefined;
    messages?: ValidationMessage[] | undefined;
    isError?: boolean;

    constructor(data?: IMessageListResultObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(item);
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(ValidationMessage.fromJS(item));
            }
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): MessageListResultObject {
        data = typeof data === 'object' ? data : {};
        let result = new MessageListResultObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item);
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        data["isError"] = this.isError;
        return data;
    }
}

export interface IMessageListResultObject {
    records?: ValidationMessage[][] | undefined;
    messages?: ValidationMessage[] | undefined;
    isError?: boolean;
}

export enum MessageTypeEnum {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class RemarkModel implements IRemarkModel {
    id!: string;
    content?: string | undefined;

    constructor(data?: IRemarkModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): RemarkModel {
        data = typeof data === 'object' ? data : {};
        let result = new RemarkModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["content"] = this.content;
        return data;
    }
}

export interface IRemarkModel {
    id: string;
    content?: string | undefined;
}

export class ResumeModel implements IResumeModel {
    id!: string;
    curriculumId!: string;
    title!: string | undefined;
    description!: string | undefined;
    sections!: SectionModel[] | undefined;
    curriculum!: CurriculumModel;
    remarks?: RemarkModel[] | undefined;

    constructor(data?: IResumeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.curriculum = new CurriculumModel();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.curriculumId = _data["curriculumId"];
            this.title = _data["title"];
            this.description = _data["description"];
            if (Array.isArray(_data["sections"])) {
                this.sections = [] as any;
                for (let item of _data["sections"])
                    this.sections!.push(SectionModel.fromJS(item));
            }
            this.curriculum = _data["curriculum"] ? CurriculumModel.fromJS(_data["curriculum"]) : new CurriculumModel();
            if (Array.isArray(_data["remarks"])) {
                this.remarks = [] as any;
                for (let item of _data["remarks"])
                    this.remarks!.push(RemarkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResumeModel {
        data = typeof data === 'object' ? data : {};
        let result = new ResumeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["curriculumId"] = this.curriculumId;
        data["title"] = this.title;
        data["description"] = this.description;
        if (Array.isArray(this.sections)) {
            data["sections"] = [];
            for (let item of this.sections)
                data["sections"].push(item.toJSON());
        }
        data["curriculum"] = this.curriculum ? this.curriculum.toJSON() : <any>undefined;
        if (Array.isArray(this.remarks)) {
            data["remarks"] = [];
            for (let item of this.remarks)
                data["remarks"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResumeModel {
    id: string;
    curriculumId: string;
    title: string | undefined;
    description: string | undefined;
    sections: SectionModel[] | undefined;
    curriculum: CurriculumModel;
    remarks?: RemarkModel[] | undefined;
}

export class SectionModel implements ISectionModel {
    id!: string;
    content!: string | undefined;
    remarks?: RemarkModel[] | undefined;

    constructor(data?: ISectionModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.content = _data["content"];
            if (Array.isArray(_data["remarks"])) {
                this.remarks = [] as any;
                for (let item of _data["remarks"])
                    this.remarks!.push(RemarkModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SectionModel {
        data = typeof data === 'object' ? data : {};
        let result = new SectionModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["content"] = this.content;
        if (Array.isArray(this.remarks)) {
            data["remarks"] = [];
            for (let item of this.remarks)
                data["remarks"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISectionModel {
    id: string;
    content: string | undefined;
    remarks?: RemarkModel[] | undefined;
}

export class UserModel implements IUserModel {
    id?: string;
    password?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    phoneNumber?: string | undefined;
    dateOfbirth?: Date;
    address?: AddressModel;
    language?: LanguageEnum;
    role?: string | undefined;
    isLoggedIn?: boolean;

    constructor(data?: IUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.phoneNumber = _data["phoneNumber"];
            this.dateOfbirth = _data["dateOfbirth"] ? new Date(_data["dateOfbirth"].toString()) : <any>undefined;
            this.address = _data["address"] ? AddressModel.fromJS(_data["address"]) : <any>undefined;
            this.language = _data["language"];
            this.role = _data["role"];
            this.isLoggedIn = _data["isLoggedIn"];
        }
    }

    static fromJS(data: any): UserModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["password"] = this.password;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["phoneNumber"] = this.phoneNumber;
        data["dateOfbirth"] = this.dateOfbirth ? this.dateOfbirth.toISOString() : <any>undefined;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["language"] = this.language;
        data["role"] = this.role;
        data["isLoggedIn"] = this.isLoggedIn;
        return data;
    }
}

export interface IUserModel {
    id?: string;
    password?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    phoneNumber?: string | undefined;
    dateOfbirth?: Date;
    address?: AddressModel;
    language?: LanguageEnum;
    role?: string | undefined;
    isLoggedIn?: boolean;
}

export class UserModelResultObject implements IUserModelResultObject {
    records?: UserModel[] | undefined;
    messages?: ValidationMessage[] | undefined;
    isError?: boolean;

    constructor(data?: IUserModelResultObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(UserModel.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(ValidationMessage.fromJS(item));
            }
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): UserModelResultObject {
        data = typeof data === 'object' ? data : {};
        let result = new UserModelResultObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        data["isError"] = this.isError;
        return data;
    }
}

export interface IUserModelResultObject {
    records?: UserModel[] | undefined;
    messages?: ValidationMessage[] | undefined;
    isError?: boolean;
}

export class ValidationMessage implements IValidationMessage {
    messageEnglish?: string | undefined;
    messageJapanese?: string | undefined;
    type?: MessageTypeEnum;

    constructor(data?: IValidationMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.messageEnglish = _data["messageEnglish"];
            this.messageJapanese = _data["messageJapanese"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): ValidationMessage {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["messageEnglish"] = this.messageEnglish;
        data["messageJapanese"] = this.messageJapanese;
        data["type"] = this.type;
        return data;
    }
}

export interface IValidationMessage {
    messageEnglish?: string | undefined;
    messageJapanese?: string | undefined;
    type?: MessageTypeEnum;
}

export class ValidationMessageResultObject implements IValidationMessageResultObject {
    records?: ValidationMessage[] | undefined;
    messages?: ValidationMessage[] | undefined;
    isError?: boolean;

    constructor(data?: IValidationMessageResultObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(ValidationMessage.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(ValidationMessage.fromJS(item));
            }
            this.isError = _data["isError"];
        }
    }

    static fromJS(data: any): ValidationMessageResultObject {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationMessageResultObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        data["isError"] = this.isError;
        return data;
    }
}

export interface IValidationMessageResultObject {
    records?: ValidationMessage[] | undefined;
    messages?: ValidationMessage[] | undefined;
    isError?: boolean;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
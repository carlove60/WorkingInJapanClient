/* tslint:disable */
/* eslint-disable */
/**
 * WaitingList
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddToQueueResponse,
  CheckInRequest,
  CheckInResponse,
  WaitingListMetaDataResponse,
  WaitingListRequest,
  WaitingListResponse,
} from '../models/index';
import {
    AddToQueueResponseFromJSON,
    AddToQueueResponseToJSON,
    CheckInRequestFromJSON,
    CheckInRequestToJSON,
    CheckInResponseFromJSON,
    CheckInResponseToJSON,
    WaitingListMetaDataResponseFromJSON,
    WaitingListMetaDataResponseToJSON,
    WaitingListRequestFromJSON,
    WaitingListRequestToJSON,
    WaitingListResponseFromJSON,
    WaitingListResponseToJSON,
} from '../models/index';

export interface ApiWaitinglistAddPartyToWaitinglistPostRequest {
    body?: object;
}

export interface ApiWaitinglistCheckInPostRequest {
    checkInRequest?: CheckInRequest;
}

export interface ApiWaitinglistWaitingListGetRequest {
    waitingListRequest?: WaitingListRequest;
}

/**
 * 
 */
export class WaitingListApi extends runtime.BaseAPI {

    /**
     */
    async apiWaitinglistAddPartyToWaitinglistPostRaw(requestParameters: ApiWaitinglistAddPartyToWaitinglistPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddToQueueResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/waitinglist/add-party-to-waitinglist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddToQueueResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiWaitinglistAddPartyToWaitinglistPost(requestParameters: ApiWaitinglistAddPartyToWaitinglistPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddToQueueResponse> {
        const response = await this.apiWaitinglistAddPartyToWaitinglistPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiWaitinglistCheckInPostRaw(requestParameters: ApiWaitinglistCheckInPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckInResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/waitinglist/check-in`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckInRequestToJSON(requestParameters['checkInRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckInResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiWaitinglistCheckInPost(requestParameters: ApiWaitinglistCheckInPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckInResponse> {
        const response = await this.apiWaitinglistCheckInPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiWaitinglistWaitingListGetRaw(requestParameters: ApiWaitinglistWaitingListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaitingListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/waitinglist/waiting-list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: WaitingListRequestToJSON(requestParameters['waitingListRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WaitingListResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiWaitinglistWaitingListGet(requestParameters: ApiWaitinglistWaitingListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaitingListResponse> {
        const response = await this.apiWaitinglistWaitingListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiWaitinglistWaitinglistMetaDataGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaitingListMetaDataResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/waitinglist/waitinglist-meta-data`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WaitingListMetaDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiWaitinglistWaitinglistMetaDataGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaitingListMetaDataResponse> {
        const response = await this.apiWaitinglistWaitinglistMetaDataGetRaw(initOverrides);
        return await response.value();
    }

}
